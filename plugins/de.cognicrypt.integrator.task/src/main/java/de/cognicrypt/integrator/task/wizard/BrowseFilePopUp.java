package de.cognicrypt.integrator.task.wizard;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;

import de.cognicrypt.core.Constants;
import de.cognicrypt.integrator.task.models.IntegratorModel;
import de.cognicrypt.integrator.task.widgets.*;


public class BrowseFilePopUp extends Dialog {
	PageForTaskIntegratorWizard pageForTaskIntegratorWizard;
	CompositeTaskInformation compositeChoiceForModeOfWizard;
	CompositeBrowseForFile compCryslTemplate;
	CompositeBrowseForFile compCryslTemplateAtInit;
	LinkedList<CompositeBrowseForFile> listOfCompCryslTemplate = new LinkedList<CompositeBrowseForFile>();
	Dimension windowSize;
	private int counterAddedIdentifiert = 0;
	
	public BrowseFilePopUp(final Shell parentShell, PageForTaskIntegratorWizard pageForTaskIntegratorWizard, CompositeTaskInformation compositeChoiceForModeOfWizard) {
		super(parentShell);
		this.pageForTaskIntegratorWizard = pageForTaskIntegratorWizard;
		this.compositeChoiceForModeOfWizard = compositeChoiceForModeOfWizard;
		windowSize = Toolkit.getDefaultToolkit().getScreenSize();
		
		// get init size for counter to continue autogenerated ids
		try {
			counterAddedIdentifiert = compositeChoiceForModeOfWizard.getIdCounter();
		} catch (Exception e) {
			// no warning because this only means there are no identifiers at the moment;
		}
	}
	
	protected Control createDialogArea(Composite parent) {
		final Composite container = (Composite) super.createDialogArea(parent);
		container.setLayout(new GridLayout(1, false));

		
		final Label reminder = new Label(container, SWT.NONE);
		reminder.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1));
		reminder.setText("Please make sure your identifier is unique!");
		
		final Composite compositeMain = new Composite(container, SWT.NONE);
		compositeMain.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1));
		compositeMain.setVisible(true);
		compositeMain.setLayout(new GridLayout(1, false));
		
		final ScrolledComposite scrolledTemplates = new ScrolledComposite(compositeMain,
				SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
		scrolledTemplates.setExpandHorizontal(true);
		scrolledTemplates.setExpandVertical(true);
		scrolledTemplates.setMinWidth((int) (/*windowSize.getWidth()*0.27)*/ 950));
		scrolledTemplates.setMinHeight((int) (/*windowSize.getHeight()*0.1)*/150));

		final Composite compositeContainer = new Composite(scrolledTemplates, SWT.NONE);
		compositeContainer.setLayout(new GridLayout(1, false));
		scrolledTemplates.setContent(compositeContainer);

		final Composite templateComposite = new Composite(compositeContainer, SWT.NONE);
		templateComposite.setLayout(new GridLayout(1, false));
		templateComposite.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));

		final Composite addBtnComposite = new Composite(compositeContainer, SWT.NONE);
		addBtnComposite.setLayout(new GridLayout());
		addBtnComposite.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));

		compCryslTemplateAtInit = new CompositeBrowseForFile(templateComposite, SWT.NONE,
				Constants.WIDGET_DATA_LOCATION_OF_CRYSLTEMPLATE_FILE, new String[] { "*.java" },
				"Select crysl template file that contains the code details", pageForTaskIntegratorWizard, compositeChoiceForModeOfWizard);
		compCryslTemplateAtInit.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, true));
		compCryslTemplateAtInit.setOptionalText("File " + counterAddedIdentifiert);
		counterAddedIdentifiert++;
		
		listOfCompCryslTemplate.add(compCryslTemplateAtInit);
		
		final Button addBtn = new Button(addBtnComposite, SWT.NONE);
		addBtn.setText("Add");

		addBtn.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(final SelectionEvent e) {
				compCryslTemplate = new CompositeBrowseForFile(templateComposite, SWT.NONE,
						Constants.WIDGET_DATA_LOCATION_OF_CRYSLTEMPLATE_FILE, new String[] { "*.java" },
						"Select crysl template file that contains the code details", pageForTaskIntegratorWizard, compositeChoiceForModeOfWizard);
				compCryslTemplate.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, true));
				compCryslTemplate.setOptionalText("File " + counterAddedIdentifiert);
				counterAddedIdentifiert++;

				listOfCompCryslTemplate.add(compCryslTemplate);

				scrolledTemplates.layout(true, true);
				scrolledTemplates.setMinSize(compositeContainer.computeSize(SWT.DEFAULT, SWT.DEFAULT));
			}
		});
		
		return container;
	}
	
	@Override
    protected void configureShell(Shell newShell) {
        super.configureShell(newShell);
        newShell.setText("Selection dialog");
    }

    @Override
    protected Point getInitialSize() {
        return new Point((int) (950/*windowSize.getWidth()*0.3*/), (int) (300/*windowSize.getHeight()*0.2*/)); // 1000, 350
    }

    
    private boolean checkNeededFields() {
    	// check if all path fields are filled
    	for(int i = 0; i < listOfCompCryslTemplate.size(); i++) {
    		if(listOfCompCryslTemplate.get(i).getPathText().equals("") || listOfCompCryslTemplate.get(i).getOptionalText().equals("")) {
    			MessageDialog.openError(getShell(), "Warning", "Fill all fields!");
    			return false;
    		}
    	}
    	return true;
    }
    
    @Override 
    protected void okPressed() {
    	if (checkNeededFields()) {
    		// check if identifier is unique in terms of the add window
	    	String duplicateIdentifier = "";
	    	
	    	for (int i = 0; i < listOfCompCryslTemplate.size(); i++) {
	    		for (int j = 0; j < listOfCompCryslTemplate.size(); j++) {
	    			if (i == j) continue;
	    			if (listOfCompCryslTemplate.get(i).getOptionalText().contentEquals(listOfCompCryslTemplate.get(j).getOptionalText())) {
	    				duplicateIdentifier = listOfCompCryslTemplate.get(i).getOptionalText();
	    				break;
	    			}
	    		}
	    	}
	    	
	    	if(!duplicateIdentifier.contentEquals("")) {
	    		MessageDialog.openError(getShell(), "Warning", "Identifier " + duplicateIdentifier + " was used than more once.");
	    		return;
	    	}
	    	
	    	
	    	
	    	// check if id was used already and is in the template list 
	    	for (CompositeBrowseForFile cf : listOfCompCryslTemplate) {
	    		if (IntegratorModel.getInstance().contains(cf.getOptionalText())){
	    			duplicateIdentifier = cf.getOptionalText();
	    			break;
	    		}
	    	}
	    	

	    	if(!duplicateIdentifier.contentEquals("")) {
	    		MessageDialog.openError(getShell(), "Warning", "Identifier " + duplicateIdentifier + " has been used before.");
	    		return;
	    	}
	    	
	    	for (CompositeBrowseForFile cf : listOfCompCryslTemplate) {
	    		compositeChoiceForModeOfWizard.addTemplate(cf.getOptionalText(), new File(cf.getPathText()));
	    	}
	    	
			compositeChoiceForModeOfWizard.setIdCounter(counterAddedIdentifiert);
			super.okPressed();
    	}
    }
}
