/********************************************************************************
 * Copyright (c) 2015-2019 TU Darmstadt, Paderborn University
 * 

 * http://www.eclipse.org/legal/epl-2.0. SPDX-License-Identifier: EPL-2.0
 ********************************************************************************/

/**
 *
 */
package de.cognicrypt.integrator.task.widgets;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;

import org.eclipse.jface.fieldassist.ControlDecoration;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.layout.RowLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Text;

import de.cognicrypt.core.Constants;
import de.cognicrypt.integrator.task.UIConstants;
import de.cognicrypt.integrator.task.controllers.Validator;
import de.cognicrypt.integrator.task.models.IntegratorModel;
import de.cognicrypt.integrator.task.wizard.BrowseFilePopUp;
import de.cognicrypt.integrator.task.wizard.ModifyFilePopUp;
import de.cognicrypt.integrator.task.wizard.PageForTaskIntegratorWizard;

public class CompositeTaskInformation extends Composite {

	private final PageForTaskIntegratorWizard localContainerPage;
	
	private final ControlDecoration decTaskName; // Decoration variable to be able to access it in the events.

	private final CompositeBrowseForFile compJSON, compPNG;

	private List templateList;

	private int counterForAutogeneratedId = 0;

	/**
	 * Create the composite.
	 *
	 * @param parent
	 * @param style
	 */
	public CompositeTaskInformation(final Composite parent, final int style,
			final PageForTaskIntegratorWizard localContainerPage) {
		super(parent, style);

		this.localContainerPage = localContainerPage;
		
		IntegratorModel.resetInstance();
		
		setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
		setLayout(new GridLayout(1, false));

		/* Task Info Section */
		final Composite compositeTaskInfo = new Composite(this, SWT.NONE);
		compositeTaskInfo.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
		compositeTaskInfo.setLayout(new GridLayout(1, false));

		final Label lblNameOfTheTask = new Label(compositeTaskInfo, SWT.NONE);
		lblNameOfTheTask.setText("Task");

		// Initialize the decorator for the label for the text box with initial error state
		decTaskName = new ControlDecoration(lblNameOfTheTask, SWT.TOP | SWT.RIGHT);
		decTaskName.setShowOnlyOnFocus(false);
		decTaskName.setImage(UIConstants.DEC_ERROR);
		decTaskName.setDescriptionText(Constants.ERROR + Constants.ERROR_MESSAGE_BLANK_TASK_NAME);

		final Text txtTaskName = new Text(compositeTaskInfo, SWT.BORDER);
		txtTaskName.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1));
		txtTaskName.setTextLimit(Constants.SINGLE_LINE_TEXT_BOX_LIMIT);

		final Label lblTaskDescription = new Label(compositeTaskInfo, SWT.NONE);
		lblTaskDescription.setText("Description");

		final Text txtTaskDescription = new Text(compositeTaskInfo, SWT.BORDER | SWT.WRAP | SWT.MULTI);
		final GridData gdTaskDescription = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gdTaskDescription.heightHint = 67;
		txtTaskDescription.setLayoutData(gdTaskDescription);
		txtTaskDescription.setTextLimit(Constants.MULTI_LINE_TEXT_BOX_LIMIT);
		
		txtTaskName.addModifyListener(e -> {

			String tempName = txtTaskName.getText().trim();
			
			if(tempName.isEmpty()) {
				decTaskName.setImage(UIConstants.DEC_ERROR);
				decTaskName.setDescriptionText(Constants.ERROR + Constants.ERROR_MESSAGE_BLANK_TASK_NAME);
				return;
			}
			
			boolean taskNameAlreadyExists = Validator.checkIfTaskNameAlreadyExists(tempName);
			
			if (taskNameAlreadyExists) {
				decTaskName.setImage(UIConstants.DEC_ERROR);
				decTaskName.setDescriptionText(Constants.ERROR + Constants.ERROR_MESSAGE_DUPLICATE_TASK_NAME);
				return;
			}
				
			decTaskName.setImage(UIConstants.DEC_REQUIRED);
			decTaskName.setDescriptionText(Constants.MESSAGE_REQUIRED_FIELD);
			
			IntegratorModel.getInstance().setTaskName(tempName);
				
			// Check if the page can be set to completed
			localContainerPage.checkIfTaskInformationPageIsComplete();
		});

		txtTaskDescription.addModifyListener(
				e -> IntegratorModel.getInstance().setTaskDescription(txtTaskDescription.getText().trim()));
		
	
		
		/* Template Section */
		final Label spacer = new Label(compositeTaskInfo, SWT.HORIZONTAL);
	    spacer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL, 30));
			
		final Label lblTemplateList = new Label(compositeTaskInfo, SWT.NONE);
		lblTemplateList.setText("Templates");
		
		templateList = new List(compositeTaskInfo, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
		final GridData gd_templateList = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_templateList.heightHint = 25*5;
		templateList.setLayoutData(gd_templateList);
		
		final Composite compositeTemplateBtns = new Composite(compositeTaskInfo, SWT.NONE);
		compositeTemplateBtns.setVisible(true);
		compositeTemplateBtns.setLayout(new RowLayout(SWT.HORIZONTAL));
		
		final Button btnAddTemplate = new Button(compositeTemplateBtns, SWT.NONE);
		btnAddTemplate.setText("Add");
		
		final Button btnModifyTemplate = new Button(compositeTemplateBtns, SWT.NONE);
		btnModifyTemplate.setText("Modify");
		
		final Button btnRemoveTemplate = new Button(compositeTemplateBtns, SWT.NONE);
		btnRemoveTemplate.setText("Remove");
		
		
		CompositeTaskInformation compositeTaskInformation = this;
		
		btnAddTemplate.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(final SelectionEvent e) {
				BrowseFilePopUp fileBrowse = new BrowseFilePopUp(parent.getShell(), localContainerPage, compositeTaskInformation);
				fileBrowse.open();
			}
		});
		
		btnModifyTemplate.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(final SelectionEvent e) {
				ModifyFilePopUp fileModify = new ModifyFilePopUp(parent.getShell(), localContainerPage, compositeTaskInformation, templateList.getSelection());
				fileModify.open();
			}
		});
		
		btnRemoveTemplate.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(final SelectionEvent e) {
				removeTemplates(templateList.getSelection());
			}
		});
		
		
		/* File Import Section */
		Label spacerBeforeFileImports = new Label(this, SWT.HORIZONTAL);
		spacerBeforeFileImports.setLayoutData(new GridData(GridData.FILL_HORIZONTAL, 30));
		
		final Composite compositeFileImports = new Composite(this, SWT.NONE);
		compositeFileImports.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1));
		compositeFileImports.setVisible(true);
		compositeFileImports.setLayout(new GridLayout(1, false));
		
		compPNG = new CompositeBrowseForFile(compositeFileImports, SWT.NONE,
				Constants.WIDGET_DATA_LOCATION_OF_PNG_FILE, new String[] { "*.png" },
				"Select png file that contains the icon for the task you wish to integrate",
				localContainerPage);
		compPNG.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
		
		
		Label spacerBeforeGuidedMode = new Label(compositeFileImports, SWT.HORIZONTAL);
		spacerBeforeGuidedMode.setLayoutData(new GridData(GridData.FILL_HORIZONTAL, 30));
		
		final Button btnGuidedMode = new Button(compositeFileImports, SWT.CHECK);
		btnGuidedMode.setText("Use guided mode");
		// Guided mode set by default.
		btnGuidedMode.setSelection(true);
		IntegratorModel.getInstance().setGuidedModeChosen(btnGuidedMode.getSelection());

		final Composite compositeNonguidedMode = new Composite(compositeFileImports, SWT.NONE);
		compositeNonguidedMode.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1));
		compositeNonguidedMode.setVisible(false);
		compositeNonguidedMode.setLayout(new GridLayout(1, false));
		
		compJSON = new CompositeBrowseForFile(compositeNonguidedMode, SWT.NONE,
				Constants.WIDGET_DATA_LOCATION_OF_JSON_FILE, new String[] { "*.json" },
				"Select json file that contains the high level questions", localContainerPage);
		compJSON.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
		
		layout();

		btnGuidedMode.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(final SelectionEvent e) {
				final boolean tempSelectionStatus = btnGuidedMode.getSelection();
				// If the guided mode is selected, hide the widgets to get the location of the
				// files required for the task.
				compositeNonguidedMode.setVisible(!tempSelectionStatus);
				// Set the data value.
				IntegratorModel.getInstance().setGuidedModeChosen(tempSelectionStatus);

				// If the guided mode is not selected, the rest of the pages are set to
				// completed. This is to allow the finish button to be enabled on the first
				// page.
				for (final IWizardPage page : localContainerPage.getWizard().getPages()) {
					if (!page.getName().equals(Constants.PAGE_TASK_INFORMATION)) {
						((WizardPage) page).setPageComplete(!tempSelectionStatus);
					}
				}

				// Check if the page can be set to completed.
				localContainerPage.checkIfTaskInformationPageIsComplete();
			}
		});
	}

	@Override
	protected void checkSubclass() {
		// Disable the check that prevents subclassing of SWT components
	}


	/**
	 * @return the decNameOfTheTask
	 */
	public ControlDecoration getDecTaskName() {
		return this.decTaskName;
	}
	
	public CompositeBrowseForFile getCompPNG() {
		return compPNG;
	}

	public CompositeBrowseForFile getCompJSON() {
		return compJSON;
	}


	public void redrawTable() {
		
		HashMap<String, File> templates = IntegratorModel.getInstance().getCryslTemplateFiles();
		
		templateList.removeAll();
		
		for(String identifier : templates.keySet()) {
			templateList.add(identifier);
		}
	}
	
	public void addTemplate(String identifier, File path) {
		
		IntegratorModel.getInstance().addTemplate(identifier, path);
		localContainerPage.checkIfTaskInformationPageIsComplete();
		redrawTable();
	}
	
	public void removeTemplates(String[] identifiers) {
		
		IntegratorModel.getInstance().removeTemplates(identifiers);
		localContainerPage.checkIfTaskInformationPageIsComplete();
		redrawTable();
	}
	
	public void setIdCounter(int x) {
		counterForAutogeneratedId = x;
	}
	
	public int getIdCounter() {
		return counterForAutogeneratedId;
	}	
}
