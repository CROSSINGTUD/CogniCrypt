/********************************************************************************
 * Copyright (c) 2015-2021 TU Darmstadt, Paderborn University
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 ********************************************************************************/

package de.cognicrypt.codegenerator.crysl.templates.digitalsignatures;

import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.util.Base64;

import de.cognicrypt.codegenerator.crysl.CrySLCodeGenerator;

/** * This Class provides secure way to sign a message.

 */
public final class SecureSigner {

	/**
	 * This method generates a key pair to sign a message or verify it.
	 *
	 * @returns the key pair. Generated by RSA algorithm with size 4096.
	 * @throws NoSuchAlgorithmException This exception is thrown when the proper cryptographic algorithm for keyPairGenerator is not provided.
	 * @throws GeneralSecurityException the general security exception.
	 */
	public static java.security.KeyPair getKey() throws NoSuchAlgorithmException {
		java.security.KeyPair pair = null;
		CrySLCodeGenerator.getInstance().includeClass("java.security.KeyPairGenerator").addParameter(pair, "kp").generate();
		return pair;
	}

	/**
	 * This method signs a message with a key to securely transfer it.
	 *
	 * @param msg The string to be signed, it will be encoded in UTF_8.
	 * @param keyPair The key pair to sign the message with.
	 * @returns signed message Converted from bytes with Base64 to String.
	 * @throws NoSuchAlgorithmException This exception is thrown when the proper cryptographic algorithm is not provided.
	 * @throws InvalidKeyException This exception is thrown in case of invalid Keys (invalid encoding, wrong length, uninitialized, etc).
	 * @throws SignatureException the general signature exception.
	 * @throws GeneralSecurityException the general security exception.
	 */
	public static java.lang.String sign(java.lang.String msg, java.security.KeyPair keyPair) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
		byte[] msgBytes = msg.getBytes(StandardCharsets.UTF_8);
		byte[] res = null;
		java.security.PrivateKey privKey = keyPair.getPrivate();
		CrySLCodeGenerator.getInstance().includeClass("java.security.Signature").addParameter(privKey, "priv").addParameter(msgBytes, "inpba").addParameter(res, "out").generate();
		return Base64.getEncoder().encodeToString(res);
	}

	/**
	 * This method decodes the message and verifies the signature.
	 *
	 * @param msg the String message that will be decoded with Base64.
	 * @param keyPair to retrieve public key.
	 * @returns true, if signature is verified.
	 * @throws NoSuchAlgorithmException This exception is thrown when the proper cryptographic algorithm is not provided.
	 * @throws InvalidKeyException This exception is thrown in case of invalid Keys (invalid encoding, wrong length, uninitialized, etc).
	 * @throws SignatureException general signature exception.
	 * @throws GeneralSecurityException the general security exception.
	 */
	public static boolean vfy(java.lang.String msg, java.security.KeyPair keyPair) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
		boolean res = false;
		byte[] msgBytes = Base64.getDecoder().decode(msg);
		java.security.PublicKey pubKey = keyPair.getPublic();
		CrySLCodeGenerator.getInstance().includeClass("java.security.Signature").addParameter(pubKey, "pub").addParameter(msgBytes, "sign").addParameter(res, "out").generate();
		return res;
	}

}
