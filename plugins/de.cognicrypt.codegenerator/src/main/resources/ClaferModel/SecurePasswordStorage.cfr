abstract Enum

//enum Security
abstract Security : Enum -> integer
NoSecurity: Security = 0
Broken: Security = 1
Weak: Security = 2
Medium: Security = 3
Strong: Security = 4

//enum Performance
abstract Performance : Enum -> integer
VerySlow: Performance = 1
Slow: Performance = 2
Fast: Performance = 3
VeryFast: Performance = 4

abstract Task
    description -> string

abstract Algorithm
	name -> string
	description -> string
	security -> Security
	performance -> Performance

abstract Digest : Algorithm
    outputSize -> integer

abstract KeyDerivationAlgorithm : Algorithm
	iterations -> integer
	outputSize -> integer
	digest -> Digest?
	//security depends on underlying digest security
	[digest => security.ref = digest.security.ref]
	[outputSize = digest.outputSize]
	[digest.security != Broken]
	[iterations = 1000]//1000 is the accepted minimum default number of iterations for a slow enough computation

SHA: Digest
	[name = "SHA"]
	[description = "SHAdigest"]
	[outputSize = 160 || outputSize = 224 || outputSize = 256 || outputSize = 384 || outputSize = 512]
	[outputSize = 160 => performance = VeryFast && security = Weak]
	[outputSize = 224 => performance = Fast && security = Strong]
	[outputSize = 256 => performance = Fast && security = Strong]
	[outputSize = 384 => performance = Fast && security = Strong]
	[outputSize = 512 => performance = Slow && security = Strong]

pbkdf2 : KeyDerivationAlgorithm
	[name = "PBKDF2"]
	[description = "PBKDF2 key derivation"]
	[performance = Slow]
	[digest]
	[security.ref = digest.security.ref]

SecurePassword : Task
	[description = "Encode Password for Secure Storage"]
	kda -> KeyDerivationAlgorithm
	security -> integer
	[security = kda.security]


	
