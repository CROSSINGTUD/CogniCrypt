scope({c0_Algorithm:5, c0_AsymmetricCipher:2, c0_AttackModel:4, c0_Cipher:5, c0_Enum:21, c0_Mode:4, c0_Padding:2, c0_Performance:4, c0_Security:5, c0_SymmetricBlockCipher:3, c0_SymmetricCipher:3, c0_XQuantum:2, c0_description:5, c0_keySize:3, c0_keySizePub:2, c0_keySizeSec:2, c0_mode:3, c0_name:5, c0_padding:3, c0_performance:5, c0_performanceDec:2, c0_performanceEnc:2, c0_quantum:5, c0_secProperty:5, c0_security:5});
defaultScope(1);
intRange(-8, 7);
stringLength(43);

c0_Enum = Abstract("c0_Enum");
c0_Security = Abstract("c0_Security");
c0_NoSecurity = Clafer("c0_NoSecurity").withCard(1, 1);
c0_Broken = Clafer("c0_Broken").withCard(1, 1);
c0_Weak = Clafer("c0_Weak").withCard(1, 1);
c0_Medium = Clafer("c0_Medium").withCard(1, 1);
c0_Strong = Clafer("c0_Strong").withCard(1, 1);
c0_Performance = Abstract("c0_Performance");
c0_VerySlow = Clafer("c0_VerySlow").withCard(1, 1);
c0_Slow = Clafer("c0_Slow").withCard(1, 1);
c0_Fast = Clafer("c0_Fast").withCard(1, 1);
c0_VeryFast = Clafer("c0_VeryFast").withCard(1, 1);
c0_Padding = Abstract("c0_Padding");
c0_NoPadding = Clafer("c0_NoPadding").withCard(1, 1);
c0_PKCS5Padding = Clafer("c0_PKCS5Padding").withCard(1, 1);
c0_Mode = Abstract("c0_Mode");
c0_ECB = Clafer("c0_ECB").withCard(1, 1);
c0_CBC = Clafer("c0_CBC").withCard(1, 1);
c0_OFB = Clafer("c0_OFB").withCard(1, 1);
c0_GCM = Clafer("c0_GCM").withCard(1, 1);
c0_XQuantum = Abstract("c0_XQuantum");
c0_pre = Clafer("c0_pre").withCard(1, 1);
c0_post = Clafer("c0_post").withCard(1, 1);
c0_AttackModel = Abstract("c0_AttackModel");
c0_CPA = c0_AttackModel.addChild("c0_CPA").withCard(1, 1);
c0_CCA1 = c0_AttackModel.addChild("c0_CCA1").withCard(1, 1);
c0_CCA2 = c0_AttackModel.addChild("c0_CCA2").withCard(1, 1);
c0_SC = c0_AttackModel.addChild("c0_SC").withCard(1, 1);
c0_Algorithm = Abstract("c0_Algorithm");
c0_name = c0_Algorithm.addChild("c0_name").withCard(1, 1);
c0_description = c0_Algorithm.addChild("c0_description").withCard(1, 1);
c0_security = c0_Algorithm.addChild("c0_security").withCard(1, 1);
c0_performance = c0_Algorithm.addChild("c0_performance").withCard(1, 1);
c0_Cipher = Abstract("c0_Cipher");
c0_secProperty = c0_Cipher.addChild("c0_secProperty").withCard(1, 1);
c0_quantum = c0_Cipher.addChild("c0_quantum").withCard(1, 1);
c0_SymmetricCipher = Abstract("c0_SymmetricCipher");
c0_keySize = c0_SymmetricCipher.addChild("c0_keySize").withCard(1, 1);
c0_SymmetricBlockCipher = Abstract("c0_SymmetricBlockCipher");
c0_mode = c0_SymmetricBlockCipher.addChild("c0_mode").withCard(1, 1);
c0_padding = c0_SymmetricBlockCipher.addChild("c0_padding").withCard(1, 1);
c0_AES128 = Clafer("c0_AES128").withCard(1, 1);
c0_s = c0_AES128.addChild("c0_s").withCard(1, 1);
c0_AES192 = Clafer("c0_AES192").withCard(1, 1);
c1_s = c0_AES192.addChild("c1_s").withCard(1, 1);
c0_AES256 = Clafer("c0_AES256").withCard(1, 1);
c2_s = c0_AES256.addChild("c2_s").withCard(1, 1);
c0_AsymmetricCipher = Abstract("c0_AsymmetricCipher");
c0_keySizePub = c0_AsymmetricCipher.addChild("c0_keySizePub").withCard(1, 1);
c0_keySizeSec = c0_AsymmetricCipher.addChild("c0_keySizeSec").withCard(1, 1);
c0_performanceEnc = c0_AsymmetricCipher.addChild("c0_performanceEnc").withCard(1, 1);
c0_performanceDec = c0_AsymmetricCipher.addChild("c0_performanceDec").withCard(1, 1);
c0_RSA = Clafer("c0_RSA").withCard(1, 1);
c0_LatticeBasedCipher = Abstract("c0_LatticeBasedCipher");
c0_messageSize = c0_LatticeBasedCipher.addChild("c0_messageSize").withCard(1, 1);
c0_cipherSize = c0_LatticeBasedCipher.addChild("c0_cipherSize").withCard(1, 1);
c0_n = c0_LatticeBasedCipher.addChild("c0_n").withCard(1, 1);
c0_q = c0_LatticeBasedCipher.addChild("c0_q").withCard(1, 1);
c0_LP = Clafer("c0_LP").withCard(1, 1);
c3_s = c0_LP.addChild("c3_s").withCard(1, 1);
c0_Security.extending(c0_Enum).refToUnique(Int);
c0_NoSecurity.extending(c0_Security);
Constraint(implies(some(global(c0_NoSecurity)), equal(joinRef(global(c0_NoSecurity)), constant(0))));
c0_Broken.extending(c0_Security);
Constraint(implies(some(global(c0_Broken)), equal(joinRef(global(c0_Broken)), constant(1))));
c0_Weak.extending(c0_Security);
Constraint(implies(some(global(c0_Weak)), equal(joinRef(global(c0_Weak)), constant(2))));
c0_Medium.extending(c0_Security);
Constraint(implies(some(global(c0_Medium)), equal(joinRef(global(c0_Medium)), constant(3))));
c0_Strong.extending(c0_Security);
Constraint(implies(some(global(c0_Strong)), equal(joinRef(global(c0_Strong)), constant(4))));
c0_Performance.extending(c0_Enum).refToUnique(Int);
c0_VerySlow.extending(c0_Performance);
Constraint(implies(some(global(c0_VerySlow)), equal(joinRef(global(c0_VerySlow)), constant(1))));
c0_Slow.extending(c0_Performance);
Constraint(implies(some(global(c0_Slow)), equal(joinRef(global(c0_Slow)), constant(2))));
c0_Fast.extending(c0_Performance);
Constraint(implies(some(global(c0_Fast)), equal(joinRef(global(c0_Fast)), constant(3))));
c0_VeryFast.extending(c0_Performance);
Constraint(implies(some(global(c0_VeryFast)), equal(joinRef(global(c0_VeryFast)), constant(4))));
c0_Padding.extending(c0_Enum);
c0_NoPadding.extending(c0_Padding);
c0_PKCS5Padding.extending(c0_Padding);
c0_Mode.extending(c0_Enum);
c0_ECB.extending(c0_Mode);
c0_CBC.extending(c0_Mode);
c0_OFB.extending(c0_Mode);
c0_GCM.extending(c0_Mode);
c0_XQuantum.extending(c0_Enum);
c0_pre.extending(c0_XQuantum);
c0_post.extending(c0_XQuantum);
c0_AttackModel.extending(c0_Enum);
c0_CPA.extending(c0_AttackModel);
c0_CCA1.extending(c0_AttackModel);
c0_CCA2.extending(c0_AttackModel);
c0_SC.extending(c0_AttackModel);
c0_name.refToUnique(string);
c0_description.refToUnique(string);
c0_security.refToUnique(c0_Security);
c0_performance.refToUnique(c0_Performance);
c0_Cipher.extending(c0_Algorithm);
c0_secProperty.refToUnique(c0_AttackModel);
c0_quantum.refToUnique(c0_XQuantum);
c0_SymmetricCipher.extending(c0_Cipher);
c0_keySize.refToUnique(Int);
c0_SymmetricBlockCipher.extending(c0_SymmetricCipher);
c0_mode.refToUnique(c0_Mode);
c0_padding.refToUnique(c0_Padding);
c0_SymmetricBlockCipher.addConstraint(notEqual(joinRef(join($this(), c0_mode)), global(c0_ECB)));
c0_SymmetricBlockCipher.addConstraint(implies(equal(joinRef(join($this(), c0_mode)), global(c0_CBC)), notEqual(joinRef(join($this(), c0_padding)), global(c0_NoPadding))));
c0_AES128.extending(c0_SymmetricBlockCipher);
c0_AES128.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"AES\"")));
c0_AES128.addConstraint(equal(joinRef(join($this(), c0_description)), constant("\"Advanced Encryption Standard (AES) cipher\"")));
c0_AES128.addConstraint(equal(joinRef(join($this(), c0_keySize)), constant(128)));
c0_AES128.addConstraint(equal(joinRef(join($this(), c0_performance)), global(c0_VeryFast)));
c0_AES128.addConstraint(equal(joinRef(join($this(), c0_security)), global(c0_Medium)));
c0_AES192.extending(c0_SymmetricBlockCipher);
c0_AES192.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"AES\"")));
c0_AES192.addConstraint(equal(joinRef(join($this(), c0_description)), constant("\"Advanced Encryption Standard (AES) cipher\"")));
c0_AES192.addConstraint(equal(joinRef(join($this(), c0_keySize)), constant(192)));
c0_AES192.addConstraint(equal(joinRef(join($this(), c0_performance)), global(c0_Fast)));
c0_AES192.addConstraint(equal(joinRef(join($this(), c0_security)), global(c0_Strong)));
c0_AES256.extending(c0_SymmetricBlockCipher);
c0_AES256.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"AES\"")));
c0_AES256.addConstraint(equal(joinRef(join($this(), c0_description)), constant("\"Advanced Encryption Standard (AES) cipher\"")));
c0_AES256.addConstraint(equal(joinRef(join($this(), c0_keySize)), constant(256)));
c0_AES256.addConstraint(equal(joinRef(join($this(), c0_performance)), global(c0_Fast)));
c0_AES256.addConstraint(equal(joinRef(join($this(), c0_security)), global(c0_Strong)));
c0_AsymmetricCipher.extending(c0_Cipher);
c0_keySizePub.refToUnique(Int);
c0_keySizeSec.refToUnique(Int);
c0_performanceEnc.refToUnique(c0_Performance);
c0_performanceDec.refToUnique(c0_Performance);
c0_RSA.extending(c0_AsymmetricCipher);
c0_RSA.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"RSA\"")));
c0_RSA.addConstraint(equal(joinRef(join($this(), c0_description)), constant("\"RSA Algm\"")));
c0_RSA.addConstraint(equal(joinRef(join($this(), c0_security)), global(c0_Strong)));
c0_RSA.addConstraint(equal(joinRef(join($this(), c0_performance)), global(c0_Slow)));
c0_RSA.addConstraint(equal(joinRef(join($this(), c0_keySizePub)), constant(4)));
c0_RSA.addConstraint(equal(joinRef(join($this(), c0_keySizeSec)), joinRef(join($this(), c0_keySizePub))));
c0_LatticeBasedCipher.extending(c0_AsymmetricCipher);
c0_messageSize.refToUnique(Int);
c0_cipherSize.refToUnique(Int);
c0_n.refToUnique(Int);
c0_q.refToUnique(Int);
c0_LP.extending(c0_LatticeBasedCipher);
c0_LP.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"LP\"")));
c0_LP.addConstraint(equal(joinRef(join($this(), c0_description)), constant("\"Linder-Peikert Scheme\"")));
c0_LP.addConstraint(or(or(equal(joinRef(join($this(), c0_messageSize)), constant(1)), equal(joinRef(join($this(), c0_messageSize)), constant(2))), equal(joinRef(join($this(), c0_messageSize)), constant(3))));
c0_LP.addConstraint(or(or(or(equal(joinRef(join($this(), c0_n)), constant(1)), equal(joinRef(join($this(), c0_n)), constant(2))), equal(joinRef(join($this(), c0_n)), constant(3))), equal(joinRef(join($this(), c0_n)), constant(4))));
c0_LP.addConstraint(or(equal(joinRef(join($this(), c0_q)), constant(20)), equal(joinRef(join($this(), c0_q)), constant(40))));
c3_s.refToUnique(Int);
c0_LP.addConstraint(or(or(or(equal(joinRef(join($this(), c3_s)), constant(6)), equal(joinRef(join($this(), c3_s)), constant(9))), equal(joinRef(join($this(), c3_s)), constant(7))), equal(joinRef(join($this(), c3_s)), constant(8))));
c0_LP.addConstraint(equal(joinRef(join($this(), c0_quantum)), global(c0_post)));
c0_LP.addConstraint(implies(equal(joinRef(join($this(), c0_n)), constant(1)), and(and(and(equal(joinRef(join($this(), c0_q)), constant(20)), equal(joinRef(join($this(), c3_s)), constant(6))), equal(joinRef(join($this(), c0_security)), global(c0_Broken))), equal(joinRef(join($this(), c0_cipherSize)), mul(constant(22), joinRef(join($this(), c0_messageSize)))))));
c0_LP.addConstraint(implies(equal(joinRef(join($this(), c0_n)), constant(2)), and(and(and(equal(joinRef(join($this(), c0_q)), constant(40)), equal(joinRef(join($this(), c3_s)), constant(9))), equal(joinRef(join($this(), c0_security)), global(c0_Weak))), equal(joinRef(join($this(), c0_cipherSize)), mul(constant(30), joinRef(join($this(), c0_messageSize)))))));
c0_LP.addConstraint(implies(equal(joinRef(join($this(), c0_n)), constant(3)), and(and(and(equal(joinRef(join($this(), c0_q)), constant(40)), equal(joinRef(join($this(), c3_s)), constant(7))), equal(joinRef(join($this(), c0_security)), global(c0_Medium))), equal(joinRef(join($this(), c0_cipherSize)), mul(constant(36), joinRef(join($this(), c0_messageSize)))))));
c0_LP.addConstraint(implies(equal(joinRef(join($this(), c0_n)), constant(4)), and(and(and(equal(joinRef(join($this(), c0_q)), constant(40)), equal(joinRef(join($this(), c3_s)), constant(8))), equal(joinRef(join($this(), c0_security)), global(c0_Strong))), equal(joinRef(join($this(), c0_cipherSize)), mul(constant(42), joinRef(join($this(), c0_messageSize)))))));
c0_LP.addConstraint(equal(joinRef(join($this(), c0_keySizePub)), mul(mul(joinRef(join($this(), c0_n)), joinRef(join($this(), c0_n))), constant(25))));
c0_LP.addConstraint(equal(joinRef(join($this(), c0_keySizeSec)), mul(joinRef(join($this(), c0_n)), constant(26))));
c0_LP.addConstraint(equal(joinRef(join($this(), c0_performanceEnc)), global(c0_Slow)));
c0_LP.addConstraint(equal(joinRef(join($this(), c0_performanceDec)), global(c0_Fast)));
