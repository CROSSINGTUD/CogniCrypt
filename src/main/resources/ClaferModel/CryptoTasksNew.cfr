abstract Enum

//enum Security
abstract Security : Enum -> integer
NoSecurity: Security = 0
Broken: Security = 1
Weak: Security = 2
Medium: Security = 3
Strong: Security = 4

//enum Performance
abstract Performance : Enum -> integer
VerySlow: Performance = 1
Slow: Performance = 2
Fast: Performance = 3
VeryFast: Performance = 4

//enum TLS_Version
abstract TLS_Version : Enum  -> integer
SSL2: TLS_Version = 1
SSL3: TLS_Version = 2
TLS1_0: TLS_Version = 3
TLS1_1: TLS_Version = 4
TLS1_2: TLS_Version = 5

//enum Padding
abstract Padding: Enum 
NoPadding : Padding
PKCS5Padding : Padding

//enum Mode
abstract Mode : Enum
ECB : Mode
CBC : Mode
OFB : Mode

abstract Property : Enum
asymmEncrProperty : Property
digSigProperty : Property
keyAgrProperty : Property



abstract Algorithm
	name -> string
	description -> string
	security -> Security
	performance -> Performance
	classPerformance -> Performance 
	//property -> Property ?
	// asymmEncrProperty ?
	// digSigProperty ?
	// keyAgrProperty ?
	// [asymmEncrProperty => no digSigProperty && no keyAgrProperty]
	// [digSigProperty => no asymmEncrProperty && no keyAgrProperty]
	// [keyAgrProperty => no asymmEncrProperty && no digSigProperty]
	//symmCipher -> SymmetricBlockCipher ?
	//asymmCipher -> AsymmetricCipher  ?
	//digesting -> Digest ?
	// signing -> DigitalSignatureAlgm ?
	// keyAg -> KeyAgreementAlgorithm ?
	//KeyDer -> KeyDerivationAlgorithm ?

abstract Cipher : Algorithm
	// [property != digSigProperty]
	// [property != keyAgrProperty]

abstract SymmetricCipher : Cipher
	keySize -> integer
	//[property != asymmEncrProperty]
	// SymmEncryptionProperty
	[classPerformance = Fast]

abstract AsymmetricCipher: Cipher
	[classPerformance = VerySlow]

abstract SymmetricBlockCipher : SymmetricCipher
	mode -> Mode
	padding -> Padding
	[mode != ECB]
	[mode = CBC => padding != NoPadding]

abstract DigitalSignatureAlgm : Algorithm
	//[property = digSigProperty]
	// [no keyAgrProperty]
	// [no asymmEncrProperty]
	//keySize -> integer
	[classPerformance = VerySlow]

abstract KeyAgreementAlgorithm : Algorithm
	//[property = keyAgrProperty]
	// [no digSigProperty]
	// [no asymmEncrProperty]
	[classPerformance = Slow]

abstract Digest : Algorithm
	outputSize -> integer
	// [no digSigProperty]
	// [no asymmEncrProperty]
	// [no keyAgrProperty]
	//[no property]
	[classPerformance = VeryFast]

// abstract KeyDerivationAlgorithm : Algorithm
// 	outputSize -> integer ?
// 	// [no digSigProperty]
// 	// [no asymmEncrProperty]
// 	// [no keyAgrProperty]
// 	//[no property]
// 	[classPerformance = Slow]

abstract Task
    description -> string

//SymmetricBlockCipherAlgorithms

abstract AES : SymmetricBlockCipher
    [name = "AES"]
    [description = "Advanced Encryption Standard (AES) cipher"]
    [keySize = 128 || keySize = 192 || keySize = 256]
    [keySize = 128 => performance = VeryFast && security = Medium]
    [keySize > 128 => performance = Fast && security = Strong]


// DigestAlgorithms
SHA256: Digest
	[description = "SHA-256 digest"]
	[name = "SHA-256"]
	[outputSize = 256]
	[security = Strong]
	[performance = Fast]

SHA384: Digest
	[description = "SHA-384 digest"]
	[name = "SHA-384"]
	[outputSize = 384]
	[security = Strong]
	[performance = VerySlow]

SHA1: Digest
	[name = "SHA-1"]
	[description = "SHA-1 digest"]
	[performance = VeryFast]
	[security = Weak]
	[outputSize = 160]		

MD5: Digest
	[name = "MD5"]
	[description = "MD5 digest"]
	[performance = VeryFast]
	[security = Broken]
	[outputSize = 128]	
			

//KeyAgreementAlgorithms
ECDHE : KeyAgreementAlgorithm 
	[name = "ECDHE"]
	[description = "Key exchange algorithm"]
	[security = Strong]
	[performance = Fast]	

//DigitalSigAlgms
ECDSA : DigitalSignatureAlgm
	[name = "ECDSA"]
	[description = "Digital signature"]
	[security = Medium]
	[performance = Fast]

//KeyDerivationAlgorithms
// pbkdf2 : KeyDerivationAlgorithm
// 	[name = "PBKDF2"]
// 	[description = "PBKDF2 key derivation"]
// 	[performance = Slow]
// 	[security = Medium]	

// scrypt: KeyDerivationAlgorithm
// 	[name = "scrypt"]
// 	[description = "Scrypt password-based key derivation"]
// 	[performance = VerySlow]
// 	[security = Strong]	

// bcrypt: KeyDerivationAlgorithm
// 	[name = "bcrypt"]
// 	[description = "Bcrypt password-based key derivation"]
// 	[performance = Slow]
// 	[outputSize = 192]
// 	[security = Medium]


RSA_Sig : DigitalSignatureAlgm
	[name = "RSA"]
	[description = "RSA Algm"]
	[security = Strong]
	[performance = Slow]
	//[digSigProperty || asymmEncrProperty || keyAgrProperty]
	// [property = digSigProperty => security = Strong && performance = Slow]
	// [property = asymmEncrProperty => security = Strong && performance = VerySlow]
	// [property = keyAgrProperty => security = Medium && performance = Slow]

RSA_Asymm : AsymmetricCipher
	[name = "RSA"]
	[description = "RSA Algm"]
	[security = Strong]
	[performance = VerySlow]

RSA_KeyAgr : KeyAgreementAlgorithm
	[name = "RSA"]
	[description = "RSA Algm"]
	[security = Medium]
	[performance = Slow]

abstract CipherSuite
	abstract cipher : SymmetricBlockCipher ?
	tlsProtocol -> TLS_Version
	keyAgreement -> KeyAgreementAlgorithm ?
	signature -> DigitalSignatureAlgm
	messageAuth -> Digest
	//messageAuth -> Digest
	[messageAuth = SHA384 || messageAuth = SHA256 => tlsProtocol >= TLS1_2]

	security -> integer    
	//sec-> integer 
	[ security = min(messageAuth.security, signature.security, cipher.security) ]
	// [ sec = messageAuth.security => security = messageAuth.security || sec = keyAgreement.security => security = keyAgreement.security || 
	//   sec = cipher.security => security = cipher.security || sec = signature.security => security = signature.security]

	performance -> integer
	// classPerformance -> integer 
	[performance = min(signature.classPerformance, cipher.classPerformance, messageAuth.classPerformance)]
	// [classPerformance = messageAuth.classPerformance => performance = messageAuth.performance || classPerformance = keyAgreement.classPerformance => performance = keyAgreement.performance ||
	// classPerformance = signature.classPerformance => performance = signature.performance || classPerformance = cipher.classPerformance => performance = cipher.performance]

TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 : CipherSuite
	[signature = RSA_Sig]
	cipher : AES
	[cipher.mode = CBC]
	[cipher.keySize = 256]
	[keyAgreement = ECDHE]
	[messageAuth = SHA384]

TLS_RSA_WITH_AES_256_CBC_SHA256 : CipherSuite
	cipher : AES
	[cipher.keySize = 256]
	[cipher.mode = CBC]
	[tlsProtocol >= TLS1_2]
	[signature = RSA_Sig]
	[messageAuth = SHA256]
	[keyAgreement = RSA_KeyAgr]

TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 : CipherSuite
	cipher : AES
	[cipher.keySize = 128]
	[cipher.mode = CBC]
	[signature = RSA_Sig]
	[messageAuth = SHA256]
	[keyAgreement = RSA_KeyAgr]

SSL_RSA_WITH_NULL_MD5 : CipherSuite
	[no cipher]
	[signature = RSA_Sig]
	[messageAuth = MD5]
	[keyAgreement = RSA_KeyAgr]
	[security = NoSecurity]

SecureCommunication : Task  
	[description = "Communicate over a secure channel"]
	ciphersuites -> CipherSuite 1..*
	//[all suite : ciphersuites | suite.tlsProtocol >= TLS1_2 && suite.security > Medium]	

// SymmetricEncryption : Task
// 	[description = "Encrypt data using a secret key"]
// 	cipher -> SymmetricBlockCipher

// SecurePassword : Task
// 	[description = "Represent password in a secure way for storage"]
// 	kda -> KeyDerivationAlgorithm
// 	//[no Ciphers]
	
// PasswordBasedEncryption : Task
// 	[description = "Encrypt data using a given password"]
// 	kda -> KeyDerivationAlgorithm
// 	cipher -> SymmetricBlockCipher
// 	[cipher.keySize = kda.outputSize]