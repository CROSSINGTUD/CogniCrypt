scope({c0_Algorithm:3, c0_AsymmetricCipher:0, c0_Cipher:3, c0_Enum:15, c0_Mode:4, c0_Padding:2, c0_Performance:4, c0_Security:5, c0_SymmetricBlockCipher:3, c0_SymmetricCipher:3, c0_classPerformance:3, c0_description:3, c0_keySize:3, c0_mode:3, c0_name:3, c0_padding:3, c0_performance:3, c0_security:3});
defaultScope(1);
intRange(-8, 7);
stringLength(43);

c0_Enum = Abstract("c0_Enum");
c0_Security = Abstract("c0_Security");
c0_NoSecurity = Clafer("c0_NoSecurity").withCard(1, 1);
c0_Broken = Clafer("c0_Broken").withCard(1, 1);
c0_Weak = Clafer("c0_Weak").withCard(1, 1);
c0_Medium = Clafer("c0_Medium").withCard(1, 1);
c0_Strong = Clafer("c0_Strong").withCard(1, 1);
c0_Performance = Abstract("c0_Performance");
c0_VerySlow = Clafer("c0_VerySlow").withCard(1, 1);
c0_Slow = Clafer("c0_Slow").withCard(1, 1);
c0_Fast = Clafer("c0_Fast").withCard(1, 1);
c0_VeryFast = Clafer("c0_VeryFast").withCard(1, 1);
c0_Padding = Abstract("c0_Padding");
c0_NoPadding = Clafer("c0_NoPadding").withCard(1, 1);
c0_PKCS5Padding = Clafer("c0_PKCS5Padding").withCard(1, 1);
c0_Mode = Abstract("c0_Mode");
c0_ECB = Clafer("c0_ECB").withCard(1, 1);
c0_CBC = Clafer("c0_CBC").withCard(1, 1);
c0_OFB = Clafer("c0_OFB").withCard(1, 1);
c0_GCM = Clafer("c0_GCM").withCard(1, 1);
c0_Algorithm = Abstract("c0_Algorithm");
c0_name = c0_Algorithm.addChild("c0_name").withCard(1, 1);
c0_description = c0_Algorithm.addChild("c0_description").withCard(1, 1);
c0_security = c0_Algorithm.addChild("c0_security").withCard(1, 1);
c0_performance = c0_Algorithm.addChild("c0_performance").withCard(1, 1);
c0_classPerformance = c0_Algorithm.addChild("c0_classPerformance").withCard(1, 1);
c0_Cipher = Abstract("c0_Cipher");
c0_SymmetricCipher = Abstract("c0_SymmetricCipher");
c0_keySize = c0_SymmetricCipher.addChild("c0_keySize").withCard(1, 1);
c0_AsymmetricCipher = Abstract("c0_AsymmetricCipher");
c0_SymmetricBlockCipher = Abstract("c0_SymmetricBlockCipher");
c0_mode = c0_SymmetricBlockCipher.addChild("c0_mode").withCard(1, 1);
c0_padding = c0_SymmetricBlockCipher.addChild("c0_padding").withCard(1, 1);
c0_Task = Abstract("c0_Task");
c1_description = c0_Task.addChild("c1_description").withCard(1, 1);
c0_AES128 = Clafer("c0_AES128").withCard(1, 1);
c0_s = c0_AES128.addChild("c0_s").withCard(1, 1);
c0_AES192 = Clafer("c0_AES192").withCard(1, 1);
c1_s = c0_AES192.addChild("c1_s").withCard(1, 1);
c0_AES256 = Clafer("c0_AES256").withCard(1, 1);
c2_s = c0_AES256.addChild("c2_s").withCard(1, 1);
c0_SymmetricEncryption = Clafer("c0_SymmetricEncryption").withCard(1, 1);
c0_cipher = c0_SymmetricEncryption.addChild("c0_cipher").withCard(1, 1);
c0_Security.extending(c0_Enum).refToUnique(Int);
c0_NoSecurity.extending(c0_Security);
Constraint(implies(some(global(c0_NoSecurity)), equal(joinRef(global(c0_NoSecurity)), constant(0))));
c0_Broken.extending(c0_Security);
Constraint(implies(some(global(c0_Broken)), equal(joinRef(global(c0_Broken)), constant(1))));
c0_Weak.extending(c0_Security);
Constraint(implies(some(global(c0_Weak)), equal(joinRef(global(c0_Weak)), constant(2))));
c0_Medium.extending(c0_Security);
Constraint(implies(some(global(c0_Medium)), equal(joinRef(global(c0_Medium)), constant(3))));
c0_Strong.extending(c0_Security);
Constraint(implies(some(global(c0_Strong)), equal(joinRef(global(c0_Strong)), constant(4))));
c0_Performance.extending(c0_Enum).refToUnique(Int);
c0_VerySlow.extending(c0_Performance);
Constraint(implies(some(global(c0_VerySlow)), equal(joinRef(global(c0_VerySlow)), constant(1))));
c0_Slow.extending(c0_Performance);
Constraint(implies(some(global(c0_Slow)), equal(joinRef(global(c0_Slow)), constant(2))));
c0_Fast.extending(c0_Performance);
Constraint(implies(some(global(c0_Fast)), equal(joinRef(global(c0_Fast)), constant(3))));
c0_VeryFast.extending(c0_Performance);
Constraint(implies(some(global(c0_VeryFast)), equal(joinRef(global(c0_VeryFast)), constant(4))));
c0_Padding.extending(c0_Enum);
c0_NoPadding.extending(c0_Padding);
c0_PKCS5Padding.extending(c0_Padding);
c0_Mode.extending(c0_Enum);
c0_ECB.extending(c0_Mode);
c0_CBC.extending(c0_Mode);
c0_OFB.extending(c0_Mode);
c0_GCM.extending(c0_Mode);
c0_name.refTo(string);
c0_description.refTo(string);
c0_security.refTo(c0_Security);
c0_performance.refTo(c0_Performance);
c0_classPerformance.refTo(c0_Performance);
c0_Cipher.extending(c0_Algorithm);
c0_SymmetricCipher.extending(c0_Cipher);
c0_keySize.refTo(Int);
c0_SymmetricCipher.addConstraint(equal(joinRef(join($this(), c0_classPerformance)), global(c0_Fast)));
c0_AsymmetricCipher.extending(c0_Cipher);
c0_AsymmetricCipher.addConstraint(equal(joinRef(join($this(), c0_classPerformance)), global(c0_VerySlow)));
c0_SymmetricBlockCipher.extending(c0_SymmetricCipher);
c0_mode.refTo(c0_Mode);
c0_padding.refTo(c0_Padding);
c0_SymmetricBlockCipher.addConstraint(notEqual(joinRef(join($this(), c0_mode)), global(c0_ECB)));
c0_SymmetricBlockCipher.addConstraint(implies(equal(joinRef(join($this(), c0_mode)), global(c0_CBC)), notEqual(joinRef(join($this(), c0_padding)), global(c0_NoPadding))));
c1_description.refTo(string);
c0_AES128.extending(c0_SymmetricBlockCipher);
c0_AES128.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"AES\"")));
c0_AES128.addConstraint(equal(joinRef(join($this(), c0_description)), constant("\"Advanced Encryption Standard (AES) cipher\"")));
c0_AES128.addConstraint(equal(joinRef(join($this(), c0_keySize)), constant(128)));
c0_AES128.addConstraint(equal(joinRef(join($this(), c0_performance)), global(c0_VeryFast)));
c0_AES128.addConstraint(equal(joinRef(join($this(), c0_security)), global(c0_Medium)));
c0_AES192.extending(c0_SymmetricBlockCipher);
c0_AES192.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"AES\"")));
c0_AES192.addConstraint(equal(joinRef(join($this(), c0_description)), constant("\"Advanced Encryption Standard (AES) cipher\"")));
c0_AES192.addConstraint(equal(joinRef(join($this(), c0_keySize)), constant(192)));
c0_AES192.addConstraint(equal(joinRef(join($this(), c0_performance)), global(c0_Fast)));
c0_AES192.addConstraint(equal(joinRef(join($this(), c0_security)), global(c0_Strong)));
c0_AES256.extending(c0_SymmetricBlockCipher);
c0_AES256.addConstraint(equal(joinRef(join($this(), c0_name)), constant("\"AES\"")));
c0_AES256.addConstraint(equal(joinRef(join($this(), c0_description)), constant("\"Advanced Encryption Standard (AES) cipher\"")));
c0_AES256.addConstraint(equal(joinRef(join($this(), c0_keySize)), constant(256)));
c0_AES256.addConstraint(equal(joinRef(join($this(), c0_performance)), global(c0_Fast)));
c0_AES256.addConstraint(equal(joinRef(join($this(), c0_security)), global(c0_Strong)));
c0_SymmetricEncryption.extending(c0_Task);
c0_SymmetricEncryption.addConstraint(equal(joinRef(join($this(), c1_description)), constant("\"Encrypt data using a secret key\"")));
c0_cipher.refTo(c0_SymmetricBlockCipher);
