enum Security= Broken | Weak | Modern | Strong

abstract Algorithm
    name -> string
    description -> string
    security -> Security
    xor performance 
    	VerySlow
       	Slow
    	Fast
    	VeryFast

abstract Digest : Algorithm
    outputSize -> integer
    
abstract KeyDerivationAlgorithm : Algorithm
	iterations -> integer
	outputSize -> integer
	digest -> Digest?
	[digest => outputSize = digest.outputSize]
	[digest => security.ref = digest.security.ref]
	[no digest => outputSize = 128 || outputSize = 192 || outputSize = 256]//fix popular outputSize else all values upto maxInt will be allowed
	[no digest && outputSize = 128 => security = Modern]
	[no digest && outputSize > 128 => security = Strong ]
	[iterations = 1000]//1000 is the accepted default number of iterations for a slow enough computation

abstract Task
	description -> string

abstract Cipher : Algorithm 
    xor memory
		Low
		Medium
		High    	  

abstract SymmetricCipher : Cipher
    keySize -> integer

abstract SymmetricBlockCipher : SymmetricCipher

Ciphers
	AES128 : SymmetricBlockCipher
	    [ description = "AES encryption with 128bit key" ]
	    [ name = "AES-128bit"]
	    [ Fast ]
	    [ security = Modern ]
	    [ Low ]
	    [ keySize = 128 ]

	AES256 : SymmetricBlockCipher
	    [ description = "AES encryption with 256bit key"]
	    [ name = "AES-256bit"]
	    [ Fast ]
	    [ security = Strong ]
	    [ Medium ]
	    [ keySize = 256 ]

	DES: SymmetricBlockCipher
	    [ description = "DES encryption"]
	    [ name = "DES"]
	    [ Slow ]
	    [ Low ]
	    [ security = Weak ]
	    [ keySize = 56 ]

//group digest algorithms together
//for easier viewing/collapsing etc.
DigestAlgorithms
	md5: Digest
		[description = "MD5 digest"]
		[name = "MD5 digest"]
		[VeryFast]
		[security = Broken]
		[outputSize = 128]

	sha_1: Digest
		[name = "SHA-1"]
		[description = "SHA-1 digest"]
		[VeryFast]
		[security = Modern]
		[outputSize = 160]
	
	sha_256: Digest
		[description = "SHA-256"]
		[name = "SHA-256 digest"]
		[outputSize = 256 ]
		[security = Strong]
		[Slow]	

KeyDerivationAlgorithms
	pbkdf : KeyDerivationAlgorithm
		[name = "PBKDF2"]
		[description = "PBKDF2 key derivation"]
		[Slow]
		[digest]
	
	scrypt: KeyDerivationAlgorithm
		[name = "scrypt"]
		[description = "Scrypt password-based key derivation"]
		[no digest] //scrypt does not need a digest specified. It internally uses HMAC_SHA256
		[VerySlow]

	bcrypt: KeyDerivationAlgorithm
		[name = "bcrypt"]
		[description = "Bcrypt password-based key derivation"]
		[no digest] //scrypt does not need a digest specified. It internally uses blowfish
		[Slow]
		[outputSize = 192]//FIXME: is 192 really the only output size of bcrypt?
		

SymmetricEncryption : Task
	[description = "Encrypt data using a secret key"]
	cipher -> SymmetricBlockCipher

SecurePassword : Task
	[description = "Represent password in a secure way for storage"]
	kda -> KeyDerivationAlgorithm
	
PasswordBasedEncryption : Task
 	[description = "Encrypt data using a given password"]
 	kda -> KeyDerivationAlgorithm
 	cipher -> SymmetricBlockCipher
 	[cipher.keySize = kda.outputSize]