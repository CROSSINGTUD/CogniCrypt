enum Security= Broken | Weak | Medium | Strong
enum Performance=VerySlow | Slow | Fast | VeryFast

abstract Algorithm
    name -> string
    description -> string
    security -> Security
    performance -> Performance

abstract Digest : Algorithm
    outputSize -> integer
    
abstract KeyDerivationAlgorithm : Algorithm
	iterations -> integer
	outputSize -> integer
	digest -> Digest?
	[outputSize = 128 || outputSize = 192 || outputSize = 256]//fix popular outputSize else all values upto maxInt will be allowed
	[digest.security.ref != Broken]
	[iterations = 1000]//1000 is the accepted default number of iterations for a slow enough computation

abstract Task
	description -> string

abstract Cipher : Algorithm   

abstract SymmetricCipher : Cipher
    keySize -> integer

abstract SymmetricBlockCipher : SymmetricCipher

Ciphers ?
	AES: SymmetricBlockCipher
		[description = "Advanced Encryption Standard (AES) cipher"]
		[name = "AES"]
		[keySize = 128 || keySize = 192 || keySize = 256]
		[keySize = 128 => performance = VeryFast && security = Medium]
		[keySize > 128 => performance = Fast && security = Strong]

	DES: SymmetricBlockCipher
	    [description = "DES encryption"]
	    [name = "DES"]
	    [performance = VeryFast ]
	    [security = Broken ]
	    [keySize = 56 ]

//group digest algorithms together
//for easier viewing/collapsing etc.
DigestAlgorithms
	md5: Digest
		[description = "MD5 digest"]
		[name = "MD5 digest"]
		[performance = VeryFast]
		[security = Broken]
		[outputSize = 128]

	sha_1: Digest
		[name = "SHA-1"]
		[description = "SHA-1 digest"]
		[performance = VeryFast]
		[security = Weak]
		[outputSize = 160]
	
	sha_256: Digest
		[description = "SHA-256"]
		[name = "SHA-256 digest"]
		[outputSize = 256 ]
		[security = Strong]
		[performance = Slow]	

KeyDerivationAlgorithms
	pbkdf2 : KeyDerivationAlgorithm
		[name = "PBKDF2"]
		[description = "PBKDF2 key derivation"]
		[performance = Slow]
		[digest]
		[security.ref = digest.security.ref]
	
	scrypt: KeyDerivationAlgorithm
		[name = "scrypt"]
		[description = "Scrypt password-based key derivation"]
		[no digest] //scrypt does not need a digest specified. It internally uses HMAC_SHA256
		[performance = VerySlow]
		[security = Strong]

	bcrypt: KeyDerivationAlgorithm
		[name = "bcrypt"]
		[description = "Bcrypt password-based key derivation"]
		[no digest] //scrypt does not need a digest specified. It internally uses blowfish
		[performance = Slow]
		[outputSize = 192]//FIXME: is 192 really the only output size of bcrypt?
		[security = Medium]

SymmetricEncryption : Task
	[description = "Encrypt data using a secret key"]
	cipher -> SymmetricBlockCipher

SecurePassword : Task
	[description = "Represent password in a secure way for storage"]
	kda -> KeyDerivationAlgorithm
	[no Ciphers]
	
PasswordBasedEncryption : Task
 	[description = "Encrypt data using a given password"]
 	kda -> KeyDerivationAlgorithm
 	cipher -> SymmetricBlockCipher
 	[cipher.keySize = kda.outputSize]