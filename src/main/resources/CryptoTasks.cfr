abstract Algorithm
    name -> string
    description -> string
    xor performance 
       	Slow
    	Fast
    	VeryFast
    xor security
    	LowSecurity
    	MediumSecurity
    	HighSecurity

abstract Digest : Algorithm
    outputSize -> integer

abstract KeyDerivationAlgorithm : Algorithm
	iterations -> integer
	digest -> Digest
	outputSize -> integer
	[outputSize = digest.outputSize]
	[iterations = 1000]

abstract Task
	description -> string

abstract Cipher : Algorithm 
    memory -> integer  

abstract SymmetricCipher : Cipher
    keySize -> integer

abstract SymmetricBlockCipher : SymmetricCipher
    blockSize -> integer 

Ciphers
	AES128 : SymmetricBlockCipher
	    [ description = "AES encryption with 128bit key" ]
	    [ name = "AES"]
	    [ Fast ]
	    [ MediumSecurity ]
	    [ memory = 1 ]
	    [ keySize = 128 ]
	    [ blockSize = 128 ]

	AES256 : SymmetricBlockCipher
	    [ description = "AES encryption with 256bit key"]
	    [ name = "AES"]
	    [ Fast ]
	    [ HighSecurity ]
	    [ memory = 1 ]
	    [ keySize = 256 ]
	    [ blockSize = 128 ]

	DES: SymmetricBlockCipher
	    [ description = "DES encryption"]
	    [ name = "DES"]
	    [ Slow ]
	    [ memory = 2 ]
	    [ MediumSecurity ]
	    [ keySize = 56 ]
	    [ blockSize = 64 ]

//group digest algorithms together
//for easier viewing/collapsing etc.
DigestAlgorithms
	md5: Digest
		[description = "MD5 digest"]
		[name = "MD5"]
		[VeryFast]
		[LowSecurity]
		[outputSize = 128]

	sha_1: Digest
		[name = "SHA-1"]
		[description = "SHA-1 digest"]
		[VeryFast]
		[LowSecurity]
		[outputSize = 160]
	
	sha_256: Digest
		[description = "SHA-256 digest"]
		[name = "SHA-256"]
		[outputSize = 256 ]
		[HighSecurity]
		[Slow]	

KeyDerivationAlgorithms
	pbkdf : KeyDerivationAlgorithm
		[name = "PBKDF2"]
		[description = "PBKDF2 key derivation"]
		[Slow]
		[HighSecurity]

SymmetricEncryption : Task
	[description = "Encrypt data using a secret key"]
	cipher -> SymmetricBlockCipher

SecurePassword : Task
	[description = "Represent password in a secure way for storage"]
	kda -> KeyDerivationAlgorithm
	
PasswordBasedEncryption : Task
	[description = "Encrypt data using a given password"]
	kda -> KeyDerivationAlgorithm
	cipher -> SymmetricBlockCipher
	[cipher.keySize = kda.outputSize]