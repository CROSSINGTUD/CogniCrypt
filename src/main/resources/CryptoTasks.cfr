enum Security= Broken | Weak | Modern | Strong

abstract Algorithm
    name -> string
    description -> string
    xor performance 
       	Slow
    	Fast
    	VeryFast
    // xor security
    // 	Broken
    // 	Weak
    // 	Modern
    // 	Strong
    //security -> Security

abstract Digest : Algorithm
    outputSize -> integer
    security -> Security

abstract KeyDerivationAlgorithm : Algorithm
	iterations -> integer
	outputSize -> integer
	digest -> Digest?
	security -> Security //= digest.security
	[digest => outputSize = digest.outputSize]
	[digest => security = digest.security]
	//[outputSize = digest.outputSize]
	[iterations = 1000]

abstract Task
	description -> string

abstract Cipher : Algorithm 
    memory -> integer
    security -> Security  

abstract SymmetricCipher : Cipher
    keySize -> integer

abstract SymmetricBlockCipher : SymmetricCipher
    //blockSize -> integer 

Ciphers
	AES128 : SymmetricBlockCipher
	    [ description = "AES encryption with 128bit key" ]
	    [ name = "AES-128bit"]
	    [ Fast ]
	    [ security = Modern ]
	    [ memory = 1 ]
	    [ keySize = 128 ]
	    //[ blockSize = 128 ]

	AES256 : SymmetricBlockCipher
	    [ description = "AES encryption with 256bit key"]
	    [ name = "AES-256bit"]
	    [ Fast ]
	    [ security = Strong ]
	    [ memory = 1 ]
	    [ keySize = 256 ]
	    //[ blockSize = 128 ]

	DES: SymmetricBlockCipher
	    [ description = "DES encryption"]
	    [ name = "DES"]
	    [ Slow ]
	    [ memory = 2 ]
	    [ security = Weak ]
	    [ keySize = 56 ]
	   // [ blockSize = 64 ]

//group digest algorithms together
//for easier viewing/collapsing etc.
DigestAlgorithms
	md5: Digest
		[description = "MD5 digest"]
		[name = "MD5 digest"]
		[VeryFast]
		[security = Broken]
		[outputSize = 128]

	sha_1: Digest
		[name = "SHA-1"]
		[description = "SHA-1 digest"]
		[VeryFast]
		[security = Modern]
		[outputSize = 160]
	
	sha_256: Digest
		[description = "SHA-256"]
		[name = "SHA-256 digest"]
		[outputSize = 256 ]
		[security = Strong]
		[Slow]	

KeyDerivationAlgorithms
	pbkdf : KeyDerivationAlgorithm
		[name = "PBKDF2"]
		[description = "PBKDF2 key derivation"]
		[Slow]
		[digest]
		// [iterations < 1000 => security.Weak]
		// [iterations >= 1000 && iterations < 2000 => security.Modern]
		// [iterations >= 2000 => security.Strong]

// SymmetricEncryption : Task
// 	[description = "Encrypt data using a secret key"]
// 	cipher -> SymmetricBlockCipher

SecurePassword : Task
	[description = "Represent password in a secure way for storage"]
	kda -> KeyDerivationAlgorithm
	//digest -> Digest
	
// PasswordBasedEncryption : Task
// 	[description = "Encrypt data using a given password"]
// 	kda -> KeyDerivationAlgorithm
// 	cipher -> SymmetricBlockCipher
// 	//[cipher.keySize = kda.outputSize]